// Generated by CoffeeScript 1.6.3
(function() {
  var Application,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Application = (function() {
    function Application(baseURI, imagesPath, navigationPath, limit, perGeoHashLimit) {
      this.baseURI = baseURI;
      this.imagesPath = imagesPath;
      this.navigationPath = navigationPath;
      this.limit = limit;
      this.perGeoHashLimit = perGeoHashLimit;
      this._fetchNavigation = __bind(this._fetchNavigation, this);
      this._fetchImages = __bind(this._fetchImages, this);
      this._assignImagesToNavigation = __bind(this._assignImagesToNavigation, this);
      this.run = __bind(this.run, this);
      console.log("Loaded");
      console.log("using: base: %s, imagesPath: %s, navigationPath: %s, limit: %s", this.baseURI, this.imagesPath, this.navigationPath, this.limit);
      this.model = {
        navigation: ko.observable(null),
        images: ko.observableArray([])
      };
      this.model.navigation.subscribe(this._assignImagesToNavigation);
      this.model.images.subscribe(this._assignImagesToNavigation);
    }

    Application.prototype.run = function() {
      this._fetchImages(true);
      return this._fetchNavigation();
    };

    Application.prototype._assignImagesToNavigation = function() {
      var rows, value, _i, _len, _ref, _results;
      console.log("Assigning");
      if (this.model.images().length > 0 && (this.model.navigation() != null)) {
        console.log("We have some " + (this.model.images().length) + " images and navigation");
        _ref = this.model.navigation().descend.values();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          rows = _ref[_i];
          _results.push((function() {
            var _j, _len1, _results1,
              _this = this;
            _results1 = [];
            for (_j = 0, _len1 = rows.length; _j < _len1; _j++) {
              value = rows[_j];
              value.loaded(true);
              _results1.push(value.images(_.chain(this.model.images()).filter(function(image) {
                return image.geohash.indexOf(value.name()) === 0;
              }).take(this.perGeoHashLimit).value()));
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    };

    Application.prototype._fetchImages = function(fetchRelated, imagesPath) {
      var uri,
        _this = this;
      if (fetchRelated == null) {
        fetchRelated = false;
      }
      if (imagesPath == null) {
        imagesPath = this.imagesPath;
      }
      uri = URI(imagesPath).absoluteTo(this.baseURI).toString();
      console.log("Fetching: %s", uri);
      return $.getJSON(uri, function(data, status) {
        var current, expanded, related, _i, _len, _ref;
        console.dir(data);
        console.dir(status);
        if (status === "success" && (data.images != null)) {
          console.dir(data.images);
          current = _this.model.images();
          expanded = data.images.length > 0 ? _.first(current.concat(data.images), _this.limit) : current;
          _this.model.images(expanded);
          if (fetchRelated && (data.related != null)) {
            console.log("Fetching related");
            _ref = data.related;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              related = _ref[_i];
              _this._fetchImages(false, related.href);
            }
            return _this._fetchImages(false, data.related[0].href);
          }
        } else {
          return console.log("Failed to fetch: %s", uri);
        }
      });
    };

    Application.prototype._fetchNavigation = function() {
      var uri,
        _this = this;
      uri = URI(this.navigationPath).absoluteTo(this.baseURI).toString();
      console.log("Fetching: %s", uri);
      return $.getJSON(uri, function(data, status) {
        var mapped, rows, value, _i, _j, _len, _len1, _ref;
        console.dir(data);
        console.dir(status);
        if (status === "success" && (data.navigation != null)) {
          console.dir("Loaded navigation");
          mapped = ko.mapping.fromJS(data.navigation);
          _ref = mapped.descend.values();
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            rows = _ref[_i];
            for (_j = 0, _len1 = rows.length; _j < _len1; _j++) {
              value = rows[_j];
              value.images = ko.observableArray([]);
              value.loaded = ko.observable(false);
            }
          }
          return _this.model.navigation(mapped);
        } else {
          return console.log("Failed to fetch: %s", uri);
        }
      });
    };

    return Application;

  })();

  window.Application = Application;

}).call(this);

/*
//@ sourceMappingURL=Application.map
*/
