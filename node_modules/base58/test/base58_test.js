// Generated by CoffeeScript 1.6.3
(function() {
  var Base58, examples;

  require('should');

  Base58 = require('..');

  examples = require('./examples');

  describe('Base58', function() {
    describe('.encode', function() {
      it('encodes number to Base58 string', function() {
        var num, str, _results;
        _results = [];
        for (str in examples) {
          num = examples[str];
          _results.push(Base58.encode(num).should.eql(str));
        }
        return _results;
      });
      describe('when passed a string only containing numbers', function() {
        return it('encodes string after first converting it to an integer', function() {
          var num, str, _results;
          _results = [];
          for (str in examples) {
            num = examples[str];
            _results.push(Base58.encode(num.toString()).should.eql(str));
          }
          return _results;
        });
      });
      describe('when passed a float', function() {
        return it('throws an error', function() {
          return (function() {
            return Base58.encode(3.14);
          }).should["throw"]('Value passed is not an integer.');
        });
      });
      return describe('when passed a non-number value', function() {
        return it('throws an error', function() {
          return (function() {
            return Base58.encode('hi');
          }).should["throw"]('Value passed is not an integer.');
        });
      });
    });
    return describe('.decode', function() {
      it('decodes Base58 string to number', function() {
        var num, str, _results;
        _results = [];
        for (str in examples) {
          num = examples[str];
          _results.push(Base58.decode(str).should.eql(num));
        }
        return _results;
      });
      return describe('when passed a non-Base58 string', function() {
        return it('throws an error', function() {
          return (function() {
            return Base58.decode('>_<');
          }).should["throw"]('Value passed is not a valid Base58 string.');
        });
      });
    });
  });

}).call(this);

/*
//@ sourceMappingURL=base58_test.map
*/
